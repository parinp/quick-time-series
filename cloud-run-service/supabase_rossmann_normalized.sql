-- Create normalized tables for Rossmann dataset

-- Store table - contains information about each store
CREATE TABLE IF NOT EXISTS rossmann_stores (
    store_id INTEGER PRIMARY KEY,
    store_type TEXT,
    assortment TEXT,
    competition_distance INTEGER,
    competition_open_since_month INTEGER,
    competition_open_since_year INTEGER,
    promo2 INTEGER,
    promo2_since_week INTEGER,
    promo2_since_year INTEGER,
    promo_interval TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Sales table - contains sales data for each store
CREATE TABLE IF NOT EXISTS rossmann_sales (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    store_id INTEGER REFERENCES rossmann_stores(store_id),
    date DATE,
    sales INTEGER,
    customers INTEGER,
    open INTEGER,
    promo INTEGER,
    state_holiday TEXT,
    school_holiday INTEGER,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create indexes for faster queries
CREATE INDEX IF NOT EXISTS idx_rossmann_sales_store_id ON rossmann_sales(store_id);
CREATE INDEX IF NOT EXISTS idx_rossmann_sales_date ON rossmann_sales(date);
CREATE INDEX IF NOT EXISTS idx_rossmann_sales_store_date ON rossmann_sales(store_id, date);

-- Create a function to update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create a trigger to automatically update the updated_at column for stores
DROP TRIGGER IF EXISTS update_rossmann_stores_updated_at ON rossmann_stores;
CREATE TRIGGER update_rossmann_stores_updated_at
BEFORE UPDATE ON rossmann_stores
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- Enable row level security
ALTER TABLE rossmann_stores ENABLE ROW LEVEL SECURITY;
ALTER TABLE rossmann_sales ENABLE ROW LEVEL SECURITY;

-- Create policies to allow public read access
DROP POLICY IF EXISTS "Allow public read access to stores" ON rossmann_stores;
CREATE POLICY "Allow public read access to stores" 
ON rossmann_stores FOR SELECT 
USING (true);

DROP POLICY IF EXISTS "Allow public read access to sales" ON rossmann_sales;
CREATE POLICY "Allow public read access to sales" 
ON rossmann_sales FOR SELECT 
USING (true);

-- Create policies to allow authenticated users to insert data
DROP POLICY IF EXISTS "Allow authenticated insert to stores" ON rossmann_stores;
CREATE POLICY "Allow authenticated insert to stores" 
ON rossmann_stores FOR INSERT 
TO authenticated 
WITH CHECK (true);

DROP POLICY IF EXISTS "Allow authenticated insert to sales" ON rossmann_sales;
CREATE POLICY "Allow authenticated insert to sales" 
ON rossmann_sales FOR INSERT 
TO authenticated 
WITH CHECK (true);

-- Create a view that joins store and sales data for easier querying
CREATE OR REPLACE VIEW rossmann_combined AS
SELECT 
    s.id,
    s.store_id,
    s.date,
    s.sales,
    s.customers,
    s.open,
    s.promo,
    s.state_holiday,
    s.school_holiday,
    st.store_type,
    st.assortment,
    st.competition_distance,
    st.competition_open_since_month,
    st.competition_open_since_year,
    st.promo2,
    st.promo2_since_week,
    st.promo2_since_year,
    st.promo_interval
FROM 
    rossmann_sales s
JOIN 
    rossmann_stores st ON s.store_id = st.store_id;

-- Comments for documentation
COMMENT ON TABLE rossmann_stores IS 'Rossmann store information';
COMMENT ON TABLE rossmann_sales IS 'Rossmann sales data';
COMMENT ON VIEW rossmann_combined IS 'Combined view of Rossmann sales and store data'; 